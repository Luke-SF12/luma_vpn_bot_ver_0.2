from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.yookassa import check_payment
from database.db import db
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.yookassa import check_payment
from database.db import db
from bot.keyboards.inline import inline_menu

router = Router()

@router.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment_handler(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
    if datetime.now() - callback.message.date.replace(tzinfo=None) > timedelta(hours=24):
        await callback.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>",
            reply_markup=inline_menu()
        )
        return
    payment_id = callback.data.split("_")[2]

    async with db.pool.acquire() as connection:
        payment = await connection.fetchrow(
            "SELECT * FROM payments WHERE payment_id = $1 AND status = 'pending'", payment_id
        )

        if not payment:
            await callback.answer("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        is_paid = await check_payment(payment_id)

        if is_paid:
            await connection.execute("UPDATE payments SET status = 'succeeded' WHERE payment_id = $1", payment_id)
            await callback.message.edit_text(
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:\n"
                "<b>- ¬´–ü–æ–ª—É—á–∏—Ç—å¬ª</b> ‚Äî –≤—ã–¥–∞—Å—Ç –≤–∞–º <b>–Ω–æ–≤—ã–π –∫–ª—é—á</b> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
                "<b>- ¬´–ü—Ä–æ–¥–ª–∏—Ç—å¬ª</b> ‚Äî –æ–±–Ω–æ–≤–∏—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –±–µ–∑ —Å–º–µ–Ω—ã –∫–ª—é—á–∞.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ ‚¨áÔ∏è",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üéü –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data="get_config")],
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")]
                    ]
                )
            )
        else:
            await callback.answer("‚ùå–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")