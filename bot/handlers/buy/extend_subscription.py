from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.keyboards.inline import inline_menu
from database.db import db
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.yookassa import check_payment
from database.db import db
from bot.keyboards.inline import inline_menu
from datetime import datetime, timedelta, timezone

router = Router()

@router.callback_query(lambda c: c.data == "extend_subscription")
async def extend_subscription_handler(callback: types.CallbackQuery):
    if datetime.now(timezone.utc) - callback.message.date > timedelta(hours=24):
        await callback.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await callback.message.delete()
        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>",
            reply_markup=inline_menu()
        )
        return

    user_id = callback.from_user.id

    async with db.pool.acquire() as conn:
        subscriptions = await conn.fetch("""
            SELECT s.id, s.end_date, c.name
            FROM subscriptions s
            LEFT JOIN configs c ON s.config_id = c.id
            WHERE s.user_id = $1 AND s.status = 'active'
        """, user_id)

        if not subscriptions:
            await callback.answer("‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!", show_alert=True)
            return

        if len(subscriptions) > 1:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=sub["name"], callback_data=f"renew_{sub['id']}")]
                    for sub in subscriptions
                ]
            )
            await callback.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>", reply_markup=keyboard)
            return

        await renew_subscription(callback, subscriptions[0]['id'])

@router.callback_query(lambda c: c.data.startswith("renew_"))
async def renew_subscription(callback: types.CallbackQuery, subscription_id: int = None):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ä–æ–∫"""
    if subscription_id is None:
        # –ï—Å–ª–∏ subscription_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ –∏–∑ callback.data
        subscription_id = int(callback.data.split("_")[1])  # –ü–∞—Ä—Å–∏–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback_data

    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment = await conn.fetchrow(
            "SELECT amount FROM payments WHERE user_id = $1 AND status = 'succeeded' ORDER BY created_at DESC LIMIT 1",
            callback.from_user.id
        )

        if not payment:
            await send_error_message(callback, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        amount = payment['amount']
        duration = {100: 1, 285: 3, 540: 6}.get(amount, 1)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await conn.execute("""
            UPDATE subscriptions 
            SET end_date = end_date + INTERVAL '1 month' * $1 
            WHERE id = $2
        """, duration, subscription_id)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        new_end_date = await conn.fetchval("""
            SELECT end_date FROM subscriptions WHERE id = $1
        """, subscription_id)

        await callback.message.delete()

        await callback.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n"
            f"–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {new_end_date.strftime('%d.%m.%Y')}",
            show_alert=True
        )

        #await callback.message.delete()

        await callback.message.answer(
            f"‚úÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
            f"üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: <b>{new_end_date.strftime('%d.%m.%Y')}</b>\n\n"
            f"‚ú®–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>LumaVPN</b>.\n"
            f"–¶–µ–Ω—é –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—Ä–µ–º–ª—é—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!",
            reply_markup=inline_menu()
        )

async def send_error_message(callback: types.CallbackQuery, error_text: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫"""
    await callback.message.edit_text(f"‚ùå {error_text}", reply_markup=inline_menu())
    await callback.answer()