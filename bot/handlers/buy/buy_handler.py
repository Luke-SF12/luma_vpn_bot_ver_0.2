import asyncio

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.keyboards.inline import inline_menu
from services.yookassa import create_payment
from database.db import db
from logger import sync_logger, async_logger
from bot.states.user import UserStates  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è email
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from services.yookassa import check_payment
from database.db import db
from bot.keyboards.inline import inline_menu

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞
def subscription_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ‚Äì 100‚ÇΩ", callback_data="buy_1m")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ ‚Äì 285‚ÇΩ (5%)", callback_data="buy_3m")],
            [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 540‚ÇΩ (10%)", callback_data="buy_6m")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )

@router.callback_query(lambda c: c.data == "buy")
async def show_subscriptions(callback: types.CallbackQuery):
    if datetime.now() - callback.message.date.replace(tzinfo=None) > timedelta(hours=24):
        await callback.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>",
            reply_markup=inline_menu()
        )
        return
    user_id = callback.from_user.id
    sync_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏.")
    async with db.pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        active_subs = await conn.fetchval(
            "SELECT COUNT(*) FROM subscriptions WHERE user_id = $1 AND status = 'active'",
            user_id
        )

        if active_subs == 0:
            # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
            available_configs = await conn.fetchval(
                "SELECT COUNT(*) FROM configs WHERE is_available = TRUE"
            )
            if not available_configs:
                sync_logger.warning(f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π!", show_alert=True)
                return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    await callback.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ:</b>", reply_markup=subscription_keyboard())

@router.callback_query(lambda c: c.data.startswith("buy_"))
async def buy_handler(callback: types.CallbackQuery, state: FSMContext):
    if datetime.now() - callback.message.date.replace(tzinfo=None) > timedelta(hours=24):
        await callback.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>",
            reply_markup=inline_menu()
        )
        return
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    plan = callback.data.split("_")[1]

    prices = {"1m": 100, "3m": 285, "6m": 540}
    amount = prices.get(plan, 100)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(amount=amount, plan=plan)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ email
    async with db.pool.acquire() as connection:
        user = await connection.fetchrow("SELECT * FROM users WHERE tg_id = $1", user_id)
        if user and user.get("email"):
            # –ï—Å–ª–∏ email –µ—Å—Ç—å, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_id, payment_link = await create_payment(amount, user_id, user["email"])

            await connection.execute(
                "INSERT INTO payments (user_id, payment_id, amount, status, payment_link) VALUES ($1, $2, $3, $4, $5)",
                user_id, payment_id, amount, "pending", payment_link
            )

            await process_payment(callback, payment_id, payment_link, amount)
        else:
            # –ï—Å–ª–∏ email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
            email_request_message = await callback.message.edit_text(
                "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy")]
                    ]
                )
            )
            await state.update_data(email_request_message_id=email_request_message.message_id)
            await state.set_state(UserStates.waiting_for_email)

async def process_payment(callback: types.CallbackQuery, payment_id: str, payment_link: str, amount: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    payment_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy")]
        ]
    )

    await callback.message.edit_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {amount}‚ÇΩ</b>\n\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª</b> –Ω–∏–∂–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.\n"
        f"2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>.\n\n",
        reply_markup=payment_keyboard
    )


@router.message(UserStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    user_email = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
    if "@" not in user_email or "." not in user_email.split("@")[1]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    amount = data["amount"]
    plan = data["plan"]
    email_request_message_id = data.get("email_request_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª email
    try:
        await message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    # –ï—Å–ª–∏ email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º email
    if email_request_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=email_request_message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with db.pool.acquire() as connection:
        user = await connection.fetchrow("SELECT * FROM users WHERE tg_id = $1", message.from_user.id)
        if not user:
            await connection.execute(
                "INSERT INTO users (tg_id, username, email) VALUES ($1, $2, $3)",
                message.from_user.id, message.from_user.username or "unknown", user_email
            )
        else:
            await connection.execute(
                "UPDATE users SET email = $1 WHERE tg_id = $2",
                user_email, message.from_user.id
            )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email (—É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã)
    confirmation_message = await message.answer(f"‚úÖ –í–∞—à email <b>{user_email}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", parse_mode="HTML")

    await asyncio.sleep(3.5)  # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await confirmation_message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_id, payment_link = await create_payment(amount, message.from_user.id, user_email)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with db.pool.acquire() as connection:
        await connection.execute(
            "INSERT INTO payments (user_id, payment_id, amount, status, payment_link) VALUES ($1, $2, $3, $4, $5)",
            message.from_user.id, payment_id, amount, "pending", payment_link
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    payment_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy")]
        ]
    )

    await message.answer(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {amount}‚ÇΩ</b>\n\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª</b> –Ω–∏–∂–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.\n"
        f"2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>.\n\n",
        reply_markup=payment_keyboard
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()