from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.keyboards.reply import reply_menu
from bot.keyboards.inline import inline_menu
from database.db import db
import logging

router = Router()


@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    try:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        user_name = message.from_user.first_name
        user_id = message.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        referral_code = None
        if len(message.text.split()) > 1 and message.text.split()[1].startswith('ref_'):
            referral_code = message.text.split()[1][4:]

        async with db.pool.acquire() as conn:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await conn.fetchrow("SELECT * FROM users WHERE tg_id = $1", user_id)

            if not user:
                await conn.execute(
                    """INSERT INTO users (tg_id, username, referral_code, registration_date)
                    VALUES ($1, $2, $3, NOW())""",
                    user_id,
                    message.from_user.username,
                    f"ref_{user_id}"
                )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                if referral_code:
                    try:
                        referrer_id = int(referral_code)
                        if referrer_id != user_id:
                            await db.create_referral(referrer_id, user_id)
                            try:
                                await message.bot.send_message(
                                    chat_id=referrer_id,
                                    text=f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                                         f"@{message.from_user.username or '–ê–Ω–æ–Ω–∏–º'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.\n"
                                         f"–ö–æ–≥–¥–∞ –æ–Ω –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +20 –¥–Ω–µ–π!"
                                )
                            except Exception as e:
                                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {e}")
                    except ValueError:
                        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}")
            elif not user.get('referral_code'):
                await conn.execute(
                    "UPDATE users SET referral_code = $1 WHERE tg_id = $2",
                    f"ref_{user_id}",
                    user_id
                )

        await message.answer(
            f"<b>{user_name}</b>, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Luma VPN!</b>üåê\n\n"
            f"<b>–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!</b>\n"
            f"–° VPN –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º—ã–º —Å–µ—Ä–≤–∏—Å–∞–º:\n"
            f"<b>‚Äî Instagram, TikTok, YouTube, Discord, Reddit</b>\n"
            f"<b>‚Äî –ê–Ω–∏–º–µ —Å–∞–π—Ç—ã: jut.su, AnimeGO</b>\n\n"
            f"<b>üîí –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞.</b>\n"
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º.\n\n"
            f"<b>–ü—Ä–∏—è—Ç–Ω—ã–µ –ø–ª—é—Å—ã:</b>\n"
            f"‚Äî –ú–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ–≥–æ 100‚ÇΩ.\n"
            f"‚Äî –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è VPN —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
            f"‚Äî –û–¥–∏–Ω –∫–ª—é—á - 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!\n"
            f"‚Äî –ö–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: <b><a href='https://t.me/+IzUMlniBS700MDU8'>LumaVPN</a></b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ <b>¬´–ú–µ–Ω—éüóø¬ª</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è LumaVPN!",

            reply_markup=reply_menu()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(lambda message: message.text == "–ú–µ–Ω—éüóø")
async def menu_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>",
        reply_markup=inline_menu()
    )


@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:</b>",
        reply_markup=inline_menu()
    )
    await callback.answer()